CREATE PROCEDURE UPR_CREATE_DYNC_DATABASE
(
@DATABASE_NAME VARCHAR(256),
@MDF_FILE_NAME VARCHAR(256)=NULL,
@LDF_FILE_NAME VARCHAR(256)=NULL,
@MDF_FILE_PATH VARCHAR(256)=NULL,
@LDF_FILE_PATH VARCHAR(256)=NULL,
@MDF_FILE_SIZE VARCHAR(256)=NULL,
@LDF_FILE_SIZE VARCHAR(256)=NULL,
@MAX_MDF_FILE_SIZE VARCHAR(256)=NULL,
@MAX_LDF_FILE_SIZE VARCHAR(256)=NULL,
@MDF_SIZE_GROWTH VARCHAR(256)=NULL,
@LDF_SIZE_GROWTH VARCHAR(256)=NULL
)
AS
/*
EXEC UPR_CREATE_DYNC_DATABASE 'SQL_WITH_SK'
*/
BEGIN
SET @DATABASE_NAME=LTRIM(RTRIM(@DATABASE_NAME))
SET @MDF_FILE_NAME=LTRIM(RTRIM(@MDF_FILE_NAME)) IF @MDF_FILE_NAME IS NULL SET @MDF_FILE_NAME=@DATABASE_NAME
SET @LDF_FILE_NAME=LTRIM(RTRIM(@LDF_FILE_NAME)) IF @LDF_FILE_NAME IS NULL SET @LDF_FILE_NAME=@DATABASE_NAME+'_log'
SET @MDF_FILE_PATH=LTRIM(RTRIM(@MDF_FILE_PATH)) IF @MDF_FILE_PATH IS NULL SET @MDF_FILE_PATH=cast(SERVERPROPERTY('INSTANCEDEFAULTDATAPATH') as varchar)
sET @MDF_FILE_PATH=@MDF_FILE_PATH+@DATABASE_NAME+'.mdf'
SET @LDF_FILE_PATH=LTRIM(RTRIM(@LDF_FILE_PATH)) IF @LDF_FILE_PATH IS NULL SET @LDF_FILE_PATH=cast(SERVERPROPERTY('INSTANCEDEFAULTDATAPATH') as varchar)
SET @LDF_FILE_PATH=@LDF_FILE_PATH+@DATABASE_NAME+'.ldf'
SET @MDF_FILE_SIZE=LTRIM(RTRIM(@MDF_FILE_SIZE)) if @MDF_FILE_SIZE is null set @MDF_FILE_SIZE='8MB'
SET @LDF_FILE_SIZE=LTRIM(RTRIM(@LDF_FILE_SIZE)) if @LDF_FILE_SIZE is null set @LDF_FILE_SIZE='8MB'
SET @MAX_MDF_FILE_SIZE=LTRIM(RTRIM(@MAX_MDF_FILE_SIZE)) if @MAX_MDF_FILE_SIZE is null set @MAX_MDF_FILE_SIZE='UNLIMITED'
SET @MAX_LDF_FILE_SIZE=LTRIM(RTRIM(@MAX_LDF_FILE_SIZE)) if @MAX_LDF_FILE_SIZE is null set @MAX_LDF_FILE_SIZE='UNLIMITED'
SET @MDF_SIZE_GROWTH=LTRIM(RTRIM(@MDF_SIZE_GROWTH)) IF @MDF_SIZE_GROWTH IS NULL SET @MDF_SIZE_GROWTH='64MB'
SET @LDF_SIZE_GROWTH=LTRIM(RTRIM(@LDF_SIZE_GROWTH)) IF @LDF_SIZE_GROWTH IS NULL SET @LDF_SIZE_GROWTH='64MB'

--CHECKING IF THE GIVEN DATABASE NAME EXISTS
IF EXISTS (SELECT 1 FROM [MASTER].[DBO].[SYSDATABASES] WHERE NAME=@DATABASE_NAME)
BEGIN
 SELECT @DATABASE_NAME+ ' DATABASE NAME ALREDY EXISTS CHOOSE DIFFERENT ONE'
 RETURN
END
--for checking the assinged parameters
--SELECT @DATABASE_NAME,@MDF_FILE_NAME,@LDF_FILE_NAME,@LDF_FILE_PATH,@MDF_FILE_PATH,@MDF_FILE_SIZE,@MAX_MDF_FILE_SIZE,@MDF_SIZE_GROWTH,
--@LDF_FILE_SIZE,@MAX_LDF_FILE_SIZE,@LDF_SIZE_GROWTH

--Dynamic Way To Create Database
declare @sql_qry nvarchar(max)

set @sql_qry=N'create database '+@DATABASE_NAME + ' on primary
			 ( name=N'''+@MDF_FILE_NAME+''',filename='''+@MDF_FILE_PATH+''',
			 SIZE='+@MDF_FILE_SIZE+',MAXSIZE='+@MAX_MDF_FILE_SIZE+',FILEGROWTH='+@MDF_SIZE_GROWTH+')
			 LOG ON	
			  ( name=N'''+@LDF_FILE_NAME+''',filename='''+@LDF_FILE_PATH+''',
			 SIZE='+@LDF_FILE_SIZE+',MAXSIZE='+@MAX_LDF_FILE_SIZE+',FILEGROWTH='+@LDF_SIZE_GROWTH+')'
--TO check the generated query I have Used Print Statement
PRINT @sql_qry
EXEC SP_EXECUTESQL @sql_qry

IF EXISTS (SELECT 1 FROM [MASTER].[DBO].[SYSDATABASES] WHERE NAME=@DATABASE_NAME)
BEGIN
		SELECT @DATABASE_NAME +' DATABASE CREATED SUCCESSFULLY' AS [MSG]
END
ELSE
BEGIN
	SELECT 'ERROR' AS [MSG]
END

END

